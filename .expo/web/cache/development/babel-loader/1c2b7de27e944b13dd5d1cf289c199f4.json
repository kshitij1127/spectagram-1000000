{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\kshitij\\\\Desktop\\\\spectagram-stage-9\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\nimport * as Google from \"expo-google-app-auth\";\nimport firebase from \"firebase\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!_this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref(\"/users/\" + result.user.uid).set({\n                gmail: result.user.email,\n                profile_picture: result.additionalUserInfo.profile.picture,\n                locale: result.additionalUserInfo.profile.locale,\n                first_name: result.additionalUserInfo.profile.given_name,\n                last_name: result.additionalUserInfo.profile.family_name,\n                current_theme: \"dark\"\n              }).then(function (snapshot) {});\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log(\"User already signed-in Firebase.\");\n        }\n      });\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                behaviour: \"web\",\n                androidClientId: \"840110494340-99ijj93ruji57nqpn5kqteuohrmb9rk4.apps.googleusercontent.com\",\n                iosClientId: \"840110494340-qupn3ta1rtrcdackn652kfi6db2722b6.apps.googleusercontent.com\",\n                scopes: [\"profile\", \"email\"]\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === \"success\")) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.message);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, React.createElement(SafeAreaView, {\n        style: styles.droidSafeArea,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.appTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/logo.png\"),\n        style: styles.appIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }), React.createElement(Text, {\n        style: styles.appTitleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, \"Spectagram\")), React.createElement(View, {\n        style: styles.buttonContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: function onPress() {\n          return _this2.signInWithGoogleAsync();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/google_icon.png\"),\n        style: styles.googleIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }), React.createElement(Text, {\n        style: styles.googleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }\n      }, \"Sign in with Google\"))));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"black\"\n  },\n  droidSafeArea: {\n    marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\n  },\n  appTitle: {\n    flex: 0.4,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  appIcon: {\n    width: RFValue(130),\n    height: RFValue(130),\n    resizeMode: \"contain\"\n  },\n  appTitleText: {\n    color: \"white\",\n    textAlign: \"center\",\n    fontSize: RFValue(40)\n  },\n  buttonContainer: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  button: {\n    width: RFValue(250),\n    height: RFValue(50),\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    borderRadius: RFValue(30),\n    backgroundColor: \"white\"\n  },\n  googleIcon: {\n    width: RFValue(30),\n    height: RFValue(30),\n    resizeMode: \"contain\"\n  },\n  googleText: {\n    color: \"black\",\n    fontSize: RFValue(20)\n  }\n});","map":{"version":3,"sources":["C:/Users/kshitij/Desktop/spectagram-stage-9/screens/LoginScreen.js"],"names":["React","Component","TouchableOpacity","RFValue","Google","firebase","LoginScreen","props","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","locale","first_name","given_name","last_name","family_name","current_theme","snapshot","catch","error","errorCode","code","errorMessage","message","console","log","signInWithGoogleAsync","logInAsync","behaviour","androidClientId","iosClientId","scopes","type","cancelled","state","styles","container","droidSafeArea","appTitle","require","appIcon","appTitleText","buttonContainer","button","googleIcon","googleText","StyleSheet","create","flex","backgroundColor","marginTop","Platform","OS","StatusBar","currentHeight","justifyContent","alignItems","width","height","resizeMode","color","textAlign","fontSize","flexDirection","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    View,\r\n    Text,\r\n    StyleSheet,\r\n    SafeAreaView,\r\n    Platform,\r\n    StatusBar,\r\n    Image\r\n} from \"react-native\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { RFValue } from \"react-native-responsive-fontsize\";\r\n\r\nimport * as Google from \"expo-google-app-auth\";\r\nimport firebase from \"firebase\";\r\n\r\nexport default class LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    isUserEqual = (googleUser, firebaseUser) => {\r\n        if (firebaseUser) {\r\n            var providerData = firebaseUser.providerData;\r\n            for (var i = 0; i < providerData.length; i++) {\r\n                if (\r\n                    providerData[i].providerId ===\r\n                    firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n                    providerData[i].uid === googleUser.getBasicProfile().getId()\r\n                ) {\r\n                    // We don't need to reauth the Firebase connection.\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    onSignIn = googleUser => {\r\n        // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n        var unsubscribe = firebase.auth().onAuthStateChanged(firebaseUser => {\r\n            unsubscribe();\r\n            // Check if we are already signed-in Firebase with the correct user.\r\n            if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n                // Build Firebase credential with the Google ID token.\r\n                var credential = firebase.auth.GoogleAuthProvider.credential(\r\n                    googleUser.idToken,\r\n                    googleUser.accessToken\r\n                );\r\n\r\n                // Sign in with credential from the Google user.\r\n                firebase\r\n                    .auth()\r\n                    .signInWithCredential(credential)\r\n                    .then(function (result) {\r\n                        if (result.additionalUserInfo.isNewUser) {\r\n                            firebase\r\n                                .database()\r\n                                .ref(\"/users/\" + result.user.uid)\r\n                                .set({\r\n                                    gmail: result.user.email,\r\n                                    profile_picture: result.additionalUserInfo.profile.picture,\r\n                                    locale: result.additionalUserInfo.profile.locale,\r\n                                    first_name: result.additionalUserInfo.profile.given_name,\r\n                                    last_name: result.additionalUserInfo.profile.family_name,\r\n                                    current_theme: \"dark\"\r\n                                })\r\n                                .then(function (snapshot) { });\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        // Handle Errors here.\r\n                        var errorCode = error.code;\r\n                        var errorMessage = error.message;\r\n                        // The email of the user's account used.\r\n                        var email = error.email;\r\n                        // The firebase.auth.AuthCredential type that was used.\r\n                        var credential = error.credential;\r\n                        // ...\r\n                    });\r\n            } else {\r\n                console.log(\"User already signed-in Firebase.\");\r\n            }\r\n        });\r\n    };\r\n\r\n    signInWithGoogleAsync = async () => {\r\n        try {\r\n            const result = await Google.logInAsync({\r\n                behaviour: \"web\",\r\n                androidClientId:\r\n                    \"840110494340-99ijj93ruji57nqpn5kqteuohrmb9rk4.apps.googleusercontent.com\",\r\n                iosClientId:\r\n                    \"840110494340-qupn3ta1rtrcdackn652kfi6db2722b6.apps.googleusercontent.com\",\r\n                scopes: [\"profile\", \"email\"]\r\n            });\r\n\r\n            if (result.type === \"success\") {\r\n                this.onSignIn(result);\r\n                return result.accessToken;\r\n            } else {\r\n                return { cancelled: true };\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n            return { error: true };\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                <SafeAreaView style={styles.droidSafeArea} />\r\n                <View style={styles.appTitle}>\r\n                    <Image\r\n                        source={require(\"../assets/logo.png\")}\r\n                        style={styles.appIcon}\r\n                    ></Image>\r\n                    <Text style={styles.appTitleText}>Spectagram</Text>\r\n                </View>\r\n                <View style={styles.buttonContainer}>\r\n                    <TouchableOpacity\r\n                        style={styles.button}\r\n                        onPress={() => this.signInWithGoogleAsync()}\r\n                    >\r\n                        <Image\r\n                            source={require(\"../assets/google_icon.png\")}\r\n                            style={styles.googleIcon}\r\n                        ></Image>\r\n                        <Text style={styles.googleText}>Sign in with Google</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: \"black\"\r\n    },\r\n    droidSafeArea: {\r\n        marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\r\n    },\r\n    appTitle: {\r\n        flex: 0.4,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    appIcon: {\r\n        width: RFValue(130),\r\n        height: RFValue(130),\r\n        resizeMode: \"contain\"\r\n    },\r\n    appTitleText: {\r\n        color: \"white\",\r\n        textAlign: \"center\",\r\n        fontSize: RFValue(40)\r\n    },\r\n    buttonContainer: {\r\n        flex: 0.3,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    button: {\r\n        width: RFValue(250),\r\n        height: RFValue(50),\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n        borderRadius: RFValue(30),\r\n        backgroundColor: \"white\"\r\n    },\r\n    googleIcon: {\r\n        width: RFValue(30),\r\n        height: RFValue(30),\r\n        resizeMode: \"contain\"\r\n    },\r\n    googleText: {\r\n        color: \"black\",\r\n        fontSize: RFValue(20)\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}